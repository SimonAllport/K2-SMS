//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace K2SMS.SendSMS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SendServiceNoHeaderSoap", Namespace="com.esendex.ems.soapinterface")]
    public partial class SendServiceNoHeader : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageMultipleRecipientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageMultipleRecipientsFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SendServiceNoHeader() {
            this.Url = global::K2SMS.Properties.Settings.Default.K2SMS_SendSMS_SendServiceNoHeader;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event SendMessageFullCompletedEventHandler SendMessageFullCompleted;
        
        /// <remarks/>
        public event SendMessageMultipleRecipientsCompletedEventHandler SendMessageMultipleRecipientsCompleted;
        
        /// <remarks/>
        public event SendMessageMultipleRecipientsFullCompletedEventHandler SendMessageMultipleRecipientsFullCompleted;
        
        /// <remarks/>
        public event SendMessageBatchCompletedEventHandler SendMessageBatchCompleted;
        
        /// <remarks/>
        public event GetMessageStatusCompletedEventHandler GetMessageStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/SendMessage", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessage(string username, string password, string account, string recipient, string body, string type) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        username,
                        password,
                        account,
                        recipient,
                        body,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string username, string password, string account, string recipient, string body, string type) {
            this.SendMessageAsync(username, password, account, recipient, body, type, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string username, string password, string account, string recipient, string body, string type, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        username,
                        password,
                        account,
                        recipient,
                        body,
                        type}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/SendMessageFull", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessageFull(string username, string password, string account, string originator, string recipient, string body, string type, int validityperiod) {
            object[] results = this.Invoke("SendMessageFull", new object[] {
                        username,
                        password,
                        account,
                        originator,
                        recipient,
                        body,
                        type,
                        validityperiod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageFullAsync(string username, string password, string account, string originator, string recipient, string body, string type, int validityperiod) {
            this.SendMessageFullAsync(username, password, account, originator, recipient, body, type, validityperiod, null);
        }
        
        /// <remarks/>
        public void SendMessageFullAsync(string username, string password, string account, string originator, string recipient, string body, string type, int validityperiod, object userState) {
            if ((this.SendMessageFullOperationCompleted == null)) {
                this.SendMessageFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageFullOperationCompleted);
            }
            this.InvokeAsync("SendMessageFull", new object[] {
                        username,
                        password,
                        account,
                        originator,
                        recipient,
                        body,
                        type,
                        validityperiod}, this.SendMessageFullOperationCompleted, userState);
        }
        
        private void OnSendMessageFullOperationCompleted(object arg) {
            if ((this.SendMessageFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageFullCompleted(this, new SendMessageFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/SendMessageMultipleRecipients", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] SendMessageMultipleRecipients(string username, string password, string account, string[] recipients, string body, string type) {
            object[] results = this.Invoke("SendMessageMultipleRecipients", new object[] {
                        username,
                        password,
                        account,
                        recipients,
                        body,
                        type});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageMultipleRecipientsAsync(string username, string password, string account, string[] recipients, string body, string type) {
            this.SendMessageMultipleRecipientsAsync(username, password, account, recipients, body, type, null);
        }
        
        /// <remarks/>
        public void SendMessageMultipleRecipientsAsync(string username, string password, string account, string[] recipients, string body, string type, object userState) {
            if ((this.SendMessageMultipleRecipientsOperationCompleted == null)) {
                this.SendMessageMultipleRecipientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageMultipleRecipientsOperationCompleted);
            }
            this.InvokeAsync("SendMessageMultipleRecipients", new object[] {
                        username,
                        password,
                        account,
                        recipients,
                        body,
                        type}, this.SendMessageMultipleRecipientsOperationCompleted, userState);
        }
        
        private void OnSendMessageMultipleRecipientsOperationCompleted(object arg) {
            if ((this.SendMessageMultipleRecipientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageMultipleRecipientsCompleted(this, new SendMessageMultipleRecipientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/SendMessageMultipleRecipientsFull", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] SendMessageMultipleRecipientsFull(string username, string password, string account, string originator, string[] recipients, string body, string type, int validityperiod) {
            object[] results = this.Invoke("SendMessageMultipleRecipientsFull", new object[] {
                        username,
                        password,
                        account,
                        originator,
                        recipients,
                        body,
                        type,
                        validityperiod});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageMultipleRecipientsFullAsync(string username, string password, string account, string originator, string[] recipients, string body, string type, int validityperiod) {
            this.SendMessageMultipleRecipientsFullAsync(username, password, account, originator, recipients, body, type, validityperiod, null);
        }
        
        /// <remarks/>
        public void SendMessageMultipleRecipientsFullAsync(string username, string password, string account, string originator, string[] recipients, string body, string type, int validityperiod, object userState) {
            if ((this.SendMessageMultipleRecipientsFullOperationCompleted == null)) {
                this.SendMessageMultipleRecipientsFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageMultipleRecipientsFullOperationCompleted);
            }
            this.InvokeAsync("SendMessageMultipleRecipientsFull", new object[] {
                        username,
                        password,
                        account,
                        originator,
                        recipients,
                        body,
                        type,
                        validityperiod}, this.SendMessageMultipleRecipientsFullOperationCompleted, userState);
        }
        
        private void OnSendMessageMultipleRecipientsFullOperationCompleted(object arg) {
            if ((this.SendMessageMultipleRecipientsFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageMultipleRecipientsFullCompleted(this, new SendMessageMultipleRecipientsFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/SendMessageBatch", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] SendMessageBatch(string username, string password, string account, messagesubmission[] messages) {
            object[] results = this.Invoke("SendMessageBatch", new object[] {
                        username,
                        password,
                        account,
                        messages});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageBatchAsync(string username, string password, string account, messagesubmission[] messages) {
            this.SendMessageBatchAsync(username, password, account, messages, null);
        }
        
        /// <remarks/>
        public void SendMessageBatchAsync(string username, string password, string account, messagesubmission[] messages, object userState) {
            if ((this.SendMessageBatchOperationCompleted == null)) {
                this.SendMessageBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageBatchOperationCompleted);
            }
            this.InvokeAsync("SendMessageBatch", new object[] {
                        username,
                        password,
                        account,
                        messages}, this.SendMessageBatchOperationCompleted, userState);
        }
        
        private void OnSendMessageBatchOperationCompleted(object arg) {
            if ((this.SendMessageBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageBatchCompleted(this, new SendMessageBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/GetMessageStatus", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessageStatus(string username, string password, string account, string id) {
            object[] results = this.Invoke("GetMessageStatus", new object[] {
                        username,
                        password,
                        account,
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageStatusAsync(string username, string password, string account, string id) {
            this.GetMessageStatusAsync(username, password, account, id, null);
        }
        
        /// <remarks/>
        public void GetMessageStatusAsync(string username, string password, string account, string id, object userState) {
            if ((this.GetMessageStatusOperationCompleted == null)) {
                this.GetMessageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageStatusOperationCompleted);
            }
            this.InvokeAsync("GetMessageStatus", new object[] {
                        username,
                        password,
                        account,
                        id}, this.GetMessageStatusOperationCompleted, userState);
        }
        
        private void OnGetMessageStatusOperationCompleted(object arg) {
            if ((this.GetMessageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageStatusCompleted(this, new GetMessageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="com.esendex.ems.soapinterface")]
    public partial class messagesubmission {
        
        private string originatorField;
        
        private string recipientField;
        
        private string bodyField;
        
        private MessageContentType typeField;
        
        private int validityperiodField;
        
        /// <remarks/>
        public string originator {
            get {
                return this.originatorField;
            }
            set {
                this.originatorField = value;
            }
        }
        
        /// <remarks/>
        public string recipient {
            get {
                return this.recipientField;
            }
            set {
                this.recipientField = value;
            }
        }
        
        /// <remarks/>
        public string body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        public MessageContentType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int validityperiod {
            get {
                return this.validityperiodField;
            }
            set {
                this.validityperiodField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="com.esendex.ems.soapinterface")]
    public enum MessageContentType {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        SmartMessage,
        
        /// <remarks/>
        Unicode,
        
        /// <remarks/>
        WapPush,
        
        /// <remarks/>
        LongMessage,
        
        /// <remarks/>
        WDPMessage,
        
        /// <remarks/>
        AdvancedMessage,
        
        /// <remarks/>
        VoiceMessage,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendMessageFullCompletedEventHandler(object sender, SendMessageFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendMessageMultipleRecipientsCompletedEventHandler(object sender, SendMessageMultipleRecipientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageMultipleRecipientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageMultipleRecipientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendMessageMultipleRecipientsFullCompletedEventHandler(object sender, SendMessageMultipleRecipientsFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageMultipleRecipientsFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageMultipleRecipientsFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendMessageBatchCompletedEventHandler(object sender, SendMessageBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMessageStatusCompletedEventHandler(object sender, GetMessageStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591