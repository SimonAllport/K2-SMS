//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace K2SMS.InboxSMS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InboxServiceNoHeaderSoap", Namespace="com.esendex.ems.soapinterface")]
    public partial class InboxServiceNoHeader : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesForDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesForDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessagesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InboxServiceNoHeader() {
            this.Url = global::K2SMS.Properties.Settings.Default.K2SMS_InboxSMS_InboxServiceNoHeader;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetMessagesCompletedEventHandler GetMessagesCompleted;
        
        /// <remarks/>
        public event GetMessageByIDCompletedEventHandler GetMessageByIDCompleted;
        
        /// <remarks/>
        public event GetMessagesByIDCompletedEventHandler GetMessagesByIDCompleted;
        
        /// <remarks/>
        public event GetMessagesForDayCompletedEventHandler GetMessagesForDayCompleted;
        
        /// <remarks/>
        public event GetMessagesForDateRangeCompletedEventHandler GetMessagesForDateRangeCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        public event DeleteMessagesCompletedEventHandler DeleteMessagesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/GetMessages", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public message[] GetMessages(string username, string password, string account) {
            object[] results = this.Invoke("GetMessages", new object[] {
                        username,
                        password,
                        account});
            return ((message[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesAsync(string username, string password, string account) {
            this.GetMessagesAsync(username, password, account, null);
        }
        
        /// <remarks/>
        public void GetMessagesAsync(string username, string password, string account, object userState) {
            if ((this.GetMessagesOperationCompleted == null)) {
                this.GetMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesOperationCompleted);
            }
            this.InvokeAsync("GetMessages", new object[] {
                        username,
                        password,
                        account}, this.GetMessagesOperationCompleted, userState);
        }
        
        private void OnGetMessagesOperationCompleted(object arg) {
            if ((this.GetMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/GetMessageByID", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public message GetMessageByID(string username, string password, string account, string id) {
            object[] results = this.Invoke("GetMessageByID", new object[] {
                        username,
                        password,
                        account,
                        id});
            return ((message)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageByIDAsync(string username, string password, string account, string id) {
            this.GetMessageByIDAsync(username, password, account, id, null);
        }
        
        /// <remarks/>
        public void GetMessageByIDAsync(string username, string password, string account, string id, object userState) {
            if ((this.GetMessageByIDOperationCompleted == null)) {
                this.GetMessageByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageByIDOperationCompleted);
            }
            this.InvokeAsync("GetMessageByID", new object[] {
                        username,
                        password,
                        account,
                        id}, this.GetMessageByIDOperationCompleted, userState);
        }
        
        private void OnGetMessageByIDOperationCompleted(object arg) {
            if ((this.GetMessageByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageByIDCompleted(this, new GetMessageByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/GetMessagesByID", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public message[] GetMessagesByID(string username, string password, string account, string[] ids) {
            object[] results = this.Invoke("GetMessagesByID", new object[] {
                        username,
                        password,
                        account,
                        ids});
            return ((message[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesByIDAsync(string username, string password, string account, string[] ids) {
            this.GetMessagesByIDAsync(username, password, account, ids, null);
        }
        
        /// <remarks/>
        public void GetMessagesByIDAsync(string username, string password, string account, string[] ids, object userState) {
            if ((this.GetMessagesByIDOperationCompleted == null)) {
                this.GetMessagesByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesByIDOperationCompleted);
            }
            this.InvokeAsync("GetMessagesByID", new object[] {
                        username,
                        password,
                        account,
                        ids}, this.GetMessagesByIDOperationCompleted, userState);
        }
        
        private void OnGetMessagesByIDOperationCompleted(object arg) {
            if ((this.GetMessagesByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesByIDCompleted(this, new GetMessagesByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/GetMessagesForDay", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public message[] GetMessagesForDay(string username, string password, string account, int year, int month, int day) {
            object[] results = this.Invoke("GetMessagesForDay", new object[] {
                        username,
                        password,
                        account,
                        year,
                        month,
                        day});
            return ((message[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesForDayAsync(string username, string password, string account, int year, int month, int day) {
            this.GetMessagesForDayAsync(username, password, account, year, month, day, null);
        }
        
        /// <remarks/>
        public void GetMessagesForDayAsync(string username, string password, string account, int year, int month, int day, object userState) {
            if ((this.GetMessagesForDayOperationCompleted == null)) {
                this.GetMessagesForDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesForDayOperationCompleted);
            }
            this.InvokeAsync("GetMessagesForDay", new object[] {
                        username,
                        password,
                        account,
                        year,
                        month,
                        day}, this.GetMessagesForDayOperationCompleted, userState);
        }
        
        private void OnGetMessagesForDayOperationCompleted(object arg) {
            if ((this.GetMessagesForDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesForDayCompleted(this, new GetMessagesForDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/GetMessagesForDateRange", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public message[] GetMessagesForDateRange(string username, string password, string account, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetMessagesForDateRange", new object[] {
                        username,
                        password,
                        account,
                        startDate,
                        endDate});
            return ((message[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesForDateRangeAsync(string username, string password, string account, System.DateTime startDate, System.DateTime endDate) {
            this.GetMessagesForDateRangeAsync(username, password, account, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetMessagesForDateRangeAsync(string username, string password, string account, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetMessagesForDateRangeOperationCompleted == null)) {
                this.GetMessagesForDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesForDateRangeOperationCompleted);
            }
            this.InvokeAsync("GetMessagesForDateRange", new object[] {
                        username,
                        password,
                        account,
                        startDate,
                        endDate}, this.GetMessagesForDateRangeOperationCompleted, userState);
        }
        
        private void OnGetMessagesForDateRangeOperationCompleted(object arg) {
            if ((this.GetMessagesForDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesForDateRangeCompleted(this, new GetMessagesForDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/DeleteMessage", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMessage(string username, string password, string account, string id) {
            this.Invoke("DeleteMessage", new object[] {
                        username,
                        password,
                        account,
                        id});
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string username, string password, string account, string id) {
            this.DeleteMessageAsync(username, password, account, id, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string username, string password, string account, string id, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        username,
                        password,
                        account,
                        id}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("com.esendex.ems.soapinterface/DeleteMessages", RequestNamespace="com.esendex.ems.soapinterface", ResponseNamespace="com.esendex.ems.soapinterface", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMessages(string username, string password, string account, string[] ids) {
            this.Invoke("DeleteMessages", new object[] {
                        username,
                        password,
                        account,
                        ids});
        }
        
        /// <remarks/>
        public void DeleteMessagesAsync(string username, string password, string account, string[] ids) {
            this.DeleteMessagesAsync(username, password, account, ids, null);
        }
        
        /// <remarks/>
        public void DeleteMessagesAsync(string username, string password, string account, string[] ids, object userState) {
            if ((this.DeleteMessagesOperationCompleted == null)) {
                this.DeleteMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessagesOperationCompleted);
            }
            this.InvokeAsync("DeleteMessages", new object[] {
                        username,
                        password,
                        account,
                        ids}, this.DeleteMessagesOperationCompleted, userState);
        }
        
        private void OnDeleteMessagesOperationCompleted(object arg) {
            if ((this.DeleteMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessagesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="com.esendex.ems.soapinterface")]
    public partial class message {
        
        private string idField;
        
        private string originatorField;
        
        private string recipientField;
        
        private string bodyField;
        
        private System.DateTime sentatField;
        
        private System.DateTime receivedatField;
        
        private MessageType typeField;
        
        private MessageStatusCode statusField;
        
        private string usernameField;
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string originator {
            get {
                return this.originatorField;
            }
            set {
                this.originatorField = value;
            }
        }
        
        /// <remarks/>
        public string recipient {
            get {
                return this.recipientField;
            }
            set {
                this.recipientField = value;
            }
        }
        
        /// <remarks/>
        public string body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime sentat {
            get {
                return this.sentatField;
            }
            set {
                this.sentatField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime receivedat {
            get {
                return this.receivedatField;
            }
            set {
                this.receivedatField = value;
            }
        }
        
        /// <remarks/>
        public MessageType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public MessageStatusCode status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="com.esendex.ems.soapinterface")]
    public enum MessageType {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        SmartMessage,
        
        /// <remarks/>
        Unicode,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="com.esendex.ems.soapinterface")]
    public enum MessageStatusCode {
        
        /// <remarks/>
        Queued,
        
        /// <remarks/>
        Sent,
        
        /// <remarks/>
        Delivered,
        
        /// <remarks/>
        Failed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMessagesCompletedEventHandler(object sender, GetMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public message[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((message[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMessageByIDCompletedEventHandler(object sender, GetMessageByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMessagesByIDCompletedEventHandler(object sender, GetMessagesByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public message[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((message[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMessagesForDayCompletedEventHandler(object sender, GetMessagesForDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesForDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesForDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public message[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((message[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMessagesForDateRangeCompletedEventHandler(object sender, GetMessagesForDateRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesForDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesForDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public message[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((message[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMessagesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591